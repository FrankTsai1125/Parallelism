Assignment 3 
Mandelbulb Set 
Parallel Programming 
2025/10/17 
Mandelbrot Set 
A set of complex numbers ℂ
● for every complex number c ∈ ℂ, under iterations of 
quadratic map Zk+1 = (Zk)2 + c remain bounded 
○ Z0 = c
○ Zk+1 = (Zk )2 + c
○ |Zk| ≤ 2
● if  |Zk| ≤ 2 f or any  k,   c  belongs to the  Mandelbrot Set 
Mandelbrot Set Visualization 
● Convert each pixel to the corresponding coordinates on the complex plane 
● Plug into the equation repeatedly until | Zk| > 2 
● Color the pixel according to the iteration count 
● https://www.youtube.com/watch?v=IrYfMfUURYM 
Powers of Mandelbrot Set 
Zk+1 = (Zk )2 + c
 Zk+1 = (Zk )3 + c
 Zk+1 = (Zk )4 + c
 Zk+1 = (Zk )5 + c
Mandelbulb 
● 3D fractal using spherical coordinates (Quaternion, 四元數 ).
● In this assignment, we refer to power-8 mandelbulb 
● https://youtu.be/BLmAV6O_ea0 
Mandelbulb Visualization 
● Generate 3D images by ray tracing 
● We use ray marching algorithm 
Ray Tracing 
Ray Marching 
Often used for 3D fractal rendering  
1. Start at the “beginning” of the ray 
2. Evaluate the distance function  to
estimate how close is to the object 
3. Keep moving forward, the step should be short 
enough to not tunnel through the surface 
Distance Function for Ray Marching 
Goal 
● We provide a sequential version of sample code named hw3_cpu.cpp 
● You are asked to accelerate it with GPU 
● Learn how to write a cuda program 
● Understand the importance of Load Balancing 
Input 
./executable $x1 $y1 $z1 $x2 $y2 $z2 $width $height $filename 
●$x1      double camera position x 
●$y1      double camera position y 
●$z1      double camera position z 
●$x2      double camera target position x 
●$y2      double camera target position y 
●$z2      double camera target position z 
●$width unsigned int width of the image 
●$height unsigned int height of the image 
●$filename string filename of the output PNG image 
Output 
● Save the result to $filename 
● The output image should be a 32bit PNG image with RGBA channels 
Resources 
● /work/b10502010/pp25/hw3/ 
○hw3_cpu.cpp # sequential version 
○Makefile 
○glm/ # vector arithmetic 
○lodepng/ # png i/o 
○testcases/ 
Environment Setting 
●module load cuda 
●Run your program with slurm on 1 GPU 
Execute 
● Check testcases/xx.txt 
●00.txt: 
○pos       = -0.522 2.874 1.340 
○tarpos    = 0 0 0 
○width     = 64 
○height    = 64 
○timelimit = 5 
srun -N 1 -n 1 --gpus-per-node 1 -A ACD114118 -t 3  \
./hw3_cpu -0.522 2.874 1.340 0 0 0 64 64 00.png 
● It may take a few hours to run large cases using sequential code. Please start with small cases first and 
remember to set a time limit. 
● Remember to terminate your process  when finished to avoid wasting resources 
Judge 
●hw3-judge 
● Scoreboard: 
http://140.112.187.55:7771/scoreboard/hw3 
● Remember there is a 10-minute cooldown  between judges, please don’t abuse the judge system : ( 
● Accuracy: 97% 
Report 
● Please refer to the spec 
Submission 
● Due: Fri, 2025/10/31 23:59 
● Place the following ﬁles into a directory named <studentID>, archive it and submit to NTU Cool: 
○ b1xxxxxxx\ 
■ hw3.cu 
■ report.pdf 
■ Makeﬁle           (optional) 
● Please note that the ﬁrst character of your studentID must be lowercase. 
Q & A 
Feel free to ask if you have any questions. 
Good luck : ) 
